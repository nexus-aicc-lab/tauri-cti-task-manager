# name: Release

# on:
#   push:
#     tags:
#       - 'v*.*.*'

# permissions: write-all


# jobs:
#   release:
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [windows-latest]

#     runs-on: ${{ matrix.platform }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Rust setup
#         uses: dtolnay/rust-toolchain@stable

#       - name: Rust cache
#         uses: swatinem/rust-cache@v2
#         with:
#           workspaces: './src-tauri -> target'

#       - name: Sync node version and setup cache
#         uses: actions/setup-node@v4
#         with:
#           node-version: 'lts/*'
#           cache: 'npm'

#       - name: Install frontend dependencies
#         run: npm install

#       - name: Build the app
#         uses: tauri-apps/tauri-action@v0
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
#           TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
#         with:
#           tagName: ${{ github.ref_name }}
#           releaseName: 'CTI Task Manager v__VERSION__'
#           releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
#           releaseDraft: false
#           prerelease: false

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # write-all 대신 구체적인 권한 지정

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ''

      # npm 설치 문제 해결
      - name: Clean and Install Dependencies
        shell: pwsh
        run: |
          Write-Host "Cleaning npm cache..."
          npm cache clean --force
          
          Write-Host "Setting npm registry..."
          npm config set registry https://registry.npmjs.org/
          
          Write-Host "Removing existing files..."
          if (Test-Path "node_modules") { 
            Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "package-lock.json") { 
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps

      # 먼저 릴리즈 생성 (tauri-action이 생성하기 전에)
      - name: Create GitHub Release First
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: 'CTI Task Manager ${{ github.ref_name }}'
          body: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          draft: false
          prerelease: false

      # 빌드 (이미 생성된 릴리즈 사용)
      - name: Build the app
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'CTI Task Manager v__VERSION__'
          releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          releaseDraft: false
          prerelease: false
          # 이미 생성된 릴리즈 사용
          updaterJsonKeepUniversal: true

      # AWS S3에 업로드
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      # S3에 파일 업로드
      - name: Upload to S3
        run: |
          # 버전 추출
          $version = "${{ github.ref_name }}".Replace("v", "")
          
          Write-Host "Looking for build files..."
          Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse -Filter "*.exe" | ForEach-Object { Write-Host $_.FullName }
          Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse -Filter "*.msi" | ForEach-Object { Write-Host $_.FullName }
          
          # NSIS installer 업로드 (파일명에 공백 포함)
          $nsisFile = "src-tauri/target/release/bundle/nsis/CTI Task Master_${version}_x64-setup.exe"
          if (Test-Path $nsisFile) {
            Write-Host "Uploading NSIS installer..."
            aws s3 cp "$nsisFile" "s3://${{ secrets.S3_BUCKET }}/CTI.Task.Master_${version}_x64-setup.exe"
            aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} `
              --key "CTI.Task.Master_${version}_x64-setup.exe" --acl public-read
          }
          
          # MSI installer 업로드 (파일명에 공백 포함)
          $msiFile = "src-tauri/target/release/bundle/msi/CTI Task Master_${version}_x64_en-US.msi"
          if (Test-Path $msiFile) {
            Write-Host "Uploading MSI installer..."
            aws s3 cp "$msiFile" "s3://${{ secrets.S3_BUCKET }}/CTI.Task.Master_${version}_x64_en-US.msi"
            aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} `
              --key "CTI.Task.Master_${version}_x64_en-US.msi" --acl public-read
          }
          
          # latest.json 업로드
          if (Test-Path "latest.json") {
            Write-Host "Uploading latest.json..."
            aws s3 cp latest.json "s3://${{ secrets.S3_BUCKET }}/latest.json"
            aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} --key "latest.json" --acl public-read
          }
          
          Write-Host "S3 upload completed!"
        shell: pwsh

      # GitHub Release에 latest.json 업로드
      # - name: Upload latest.json to GitHub Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     if [ -f "latest.json" ]; then
      #       gh release upload ${{ github.ref_name }} latest.json --clobber
      #     else
      #       echo "latest.json not found!"
      #     fi
      #   shell: bash
      # GitHub Release에 latest.json 업로드
      - name: Upload latest.json to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 파일 존재 확인
          if [ -f "latest.json" ]; then
            echo "latest.json found, uploading to release..."
            gh release upload ${{ github.ref_name }} latest.json --clobber
            
            # 업로드 확인
            echo "Verifying upload..."
            gh release view ${{ github.ref_name }} --json assets -q '.assets[].name'
          else
            echo "ERROR: latest.json not found in current directory!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
        shell: bash

      # 업로드 확인
      - name: Verify uploads
        run: |
          Write-Host "=== GitHub Release Assets ==="
          gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' 2>$null || Write-Host "Release not found"
          
          Write-Host "`n=== S3 Bucket Contents ==="
          aws s3 ls s3://${{ secrets.S3_BUCKET }}/ 2>$null || Write-Host "S3 listing failed"
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}