
name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write  # 추가 권한

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ''

      # npm 설치
      - name: Clean and Install Dependencies
        shell: pwsh
        run: |
          Write-Host "Cleaning npm cache..."
          npm cache clean --force
          
          Write-Host "Setting npm registry..."
          npm config set registry https://registry.npmjs.org/
          
          Write-Host "Removing existing files..."
          if (Test-Path "node_modules") { 
            Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "package-lock.json") { 
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps

      # 먼저 GitHub Release 생성
      - name: Create Release First
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: 'CTI Task Manager ${{ github.ref_name }}'
          body: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tauri 앱 빌드 (릴리즈 이미 존재함)
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}

          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'CTI Task Manager v__VERSION__'
          releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          releaseDraft: false
          prerelease: false
          args: --verbose

      # 빌드 완료 대기
      - name: Wait for build completion
        run: Start-Sleep -Seconds 5
        shell: powershell

      # GitHub Release에 latest.json 추가
      # - name: Upload latest.json to GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     files: latest.json
      #     fail_on_unmatched_files: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Generate latest.json with signature
      #   shell: pwsh
      #   run: |
      #     $version = "${{ github.ref_name }}".Replace("v", "")
      #     $sigPath = "src-tauri/target/release/bundle/nsis/CTI.Task.Master_${version}_x64-setup.exe.sig"
      #     if (!(Test-Path $sigPath)) {
      #       Write-Error "Signature file not found at $sigPath"
      #       exit 1
      #     }

      #     $sigLines = Get-Content $sigPath
      #     $sig = $sigLines[1]  # minisign은 첫 줄이 comment, 두 번째 줄이 signature

      #     $json = @{
      #       version = "$version"
      #       notes = "CTI Task Manager v$version - 새 버전이 출시되었습니다."
      #       pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
      #       platforms = @{
      #         "windows-x86_64" = @{
      #           signature = $sig
      #           url = "https://github.com/nexus-aicc-lab/tauri-cti-task-manager/releases/download/v${version}/CTI.Task.Master_${version}_x64-setup.exe"
      #         }
      #       }
      #     } | ConvertTo-Json -Depth 5

      #     $json | Out-File -Encoding UTF8 -FilePath "latest.json"

      # 최종 검증
      - name: Verify GitHub Release Assets
        run: |
          Write-Host "=== GitHub Release Assets ==="
          gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' || Write-Host "Failed to list GitHub assets"
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}