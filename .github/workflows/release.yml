name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions: write-all

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'CTI Task Manager v__VERSION__'
          releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          releaseDraft: false
          prerelease: false

      - name: Get version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create latest.json
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'")
          
          $json = @{
            version = $version
            notes = "CTI Task Manager v$version - 새 버전이 출시되었습니다. 업데이트를 확인해보세요!"
            pub_date = $date
            platforms = @{
              "windows-x86_64" = @{
                signature = ""
                url = "https://github.com/${{ github.repository }}/releases/download/v$version/CTI.Task.Manager_$($version)_x64-setup.exe"
              }
            }
          }
          
          $json | ConvertTo-Json -Depth 3 | Out-File -FilePath latest.json -Encoding UTF8
          
          Write-Host "Created latest.json for version $version"
          Get-Content latest.json

      - name: Upload latest.json to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}