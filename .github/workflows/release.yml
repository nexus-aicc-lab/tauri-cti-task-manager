name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions: write-all

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'CTI Task Manager v__VERSION__'
          releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          releaseDraft: false
          prerelease: false

      # 약간의 대기 시간 (릴리즈 생성 완료 대기)
      - name: Wait for release
        run: Start-Sleep -Seconds 10
        shell: powershell

      # AWS S3에 업로드
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 파일 업로드
      - name: Upload to S3
        run: |
          # 버전 추출
          $version = "${{ github.ref_name }}".Replace("v", "")
          
          # 빌드된 파일 경로 확인
          Write-Host "Looking for build files..."
          
          # NSIS installer 찾기
          $nsisPath = Get-ChildItem -Path "src-tauri/target/release/bundle/nsis" -Filter "*.exe" | Select-Object -First 1
          if ($nsisPath) {
            Write-Host "Uploading NSIS installer: $($nsisPath.FullName)"
            aws s3 cp "$($nsisPath.FullName)" "s3://${{ secrets.S3_BUCKET }}/CTI.Task.Manager_${version}_x64-setup.exe"
            
            # Public 읽기 권한 설정
            aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} `
              --key "CTI.Task.Manager_${version}_x64-setup.exe" --acl public-read
          }
          
          # MSI installer 찾기
          $msiPath = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter "*.msi" | Select-Object -First 1
          if ($msiPath) {
            Write-Host "Uploading MSI installer: $($msiPath.FullName)"
            aws s3 cp "$($msiPath.FullName)" "s3://${{ secrets.S3_BUCKET }}/CTI.Task.Manager_${version}_x64_en-US.msi"
            
            # Public 읽기 권한 설정
            aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} `
              --key "CTI.Task.Manager_${version}_x64_en-US.msi" --acl public-read
          }
          
          # latest.json 업로드
          Write-Host "Uploading latest.json"
          aws s3 cp latest.json "s3://${{ secrets.S3_BUCKET }}/latest.json"
          aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET }} --key "latest.json" --acl public-read
          
          Write-Host "S3 upload completed!"
        shell: pwsh

      # GitHub CLI를 사용하여 latest.json을 GitHub Release에도 업로드
      - name: Upload latest.json to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} latest.json --clobber
        shell: bash

      # 업로드 확인
      - name: Verify uploads
        run: |
          Write-Host "=== GitHub Release Assets ==="
          gh release view ${{ github.ref_name }} --json assets -q '.assets[].name'
          
          Write-Host "`n=== S3 Bucket Contents ==="
          aws s3 ls s3://${{ secrets.S3_BUCKET }}/
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}