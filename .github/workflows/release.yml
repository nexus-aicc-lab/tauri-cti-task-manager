# name: Release

# on:
#   push:
#     tags:
#       - 'v*.*.*'

# permissions:
#   contents: write
#   packages: write

# jobs:
#   release:
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [windows-latest]

#     runs-on: ${{ matrix.platform }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Rust setup
#         uses: dtolnay/rust-toolchain@stable

#       - name: Rust cache
#         uses: swatinem/rust-cache@v2
#         with:
#           workspaces: './src-tauri -> target'

#       - name: Sync node version and setup cache
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: ''

#       - name: Clean and Install Dependencies
#         shell: pwsh
#         run: |
#           npm cache clean --force
#           npm config set registry https://registry.npmjs.org/
#           if (Test-Path "node_modules") { Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue }
#           if (Test-Path "package-lock.json") { Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue }
#           npm install --no-audit --no-fund --legacy-peer-deps

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: ${{ github.ref_name }}
#           name: 'CTI Task Manager ${{ github.ref_name }}'
#           body: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Restore .tauri/tauri.key from secret
#         run: |
#           mkdir -p .tauri
#           echo "${{ secrets.TAURI_PRIVATE_KEY }}" | base64 -d > .tauri/tauri.key

#       - name: Export TAURI_KEY_PASSWORD to environment
#         run: echo "TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}" >> $GITHUB_ENV

#       - name: Build Tauri App
#         run: npm run tauri build -- --verbose
#         shell: bash

#       - name: Generate latest.json
#         shell: pwsh
#         run: |
#           $version = "${{ github.ref_name }}".Replace("v", "")
#           $sigPath = "src-tauri/target/release/bundle/updater/CTI.Task.Master_${version}_x64-setup.exe.sig"
#           if (!(Test-Path $sigPath)) {
#             Write-Error "Signature file not found at $sigPath"
#             exit 1
#           }

#           $sigLines = Get-Content $sigPath
#           $sig = $sigLines[1]

#           $json = @{
#             version = "$version"
#             notes = "CTI Task Manager v$version - 새 버전이 출시되었습니다."
#             pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
#             platforms = @{
#               "windows-x86_64" = @{
#                 signature = $sig
#                 url = "https://github.com/nexus-aicc-lab/tauri-cti-task-manager/releases/download/v${version}/CTI Task Master_${version}_x64-setup.exe"
#               }
#             }
#           } | ConvertTo-Json -Depth 5

#           $json | Out-File -Encoding UTF8 -FilePath "latest.json"

#       - name: Upload latest.json to GitHub Release
#         run: |
#           gh release upload ${{ github.ref_name }} latest.json --clobber
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Verify GitHub Release Assets
#         run: |
#           Write-Host "=== GitHub Release Assets ==="
#           gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' || Write-Host "Failed to list GitHub assets"
#         shell: pwsh
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Verify Tauri Secrets

on:
  workflow_dispatch: # 수동 실행 전용

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Check if secrets are loaded properly
        run: |
          echo "🔍 Checking TAURI_KEY_PASSWORD"
          if [ -z "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
            echo "❌ TAURI_KEY_PASSWORD is EMPTY"
            exit 1
          else
            echo "✅ TAURI_KEY_PASSWORD is SET"
          fi

          echo "🔍 Checking TAURI_PRIVATE_KEY (base64)"
          if [ -z "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
            echo "❌ TAURI_PRIVATE_KEY is EMPTY"
            exit 1
          else
            echo "✅ TAURI_PRIVATE_KEY is SET (length: ${#{{ secrets.TAURI_PRIVATE_KEY }}})"
          fi

      - name: 🧪 Try decoding and writing tauri.key
        run: |
          mkdir -p .tauri
          echo "${{ secrets.TAURI_PRIVATE_KEY }}" | base64 -d > .tauri/tauri.key
          echo "📂 .tauri contents:"
          ls -l .tauri
          echo "🔐 Preview tauri.key (first 5 lines)"
          head -n 5 .tauri/tauri.key || echo "❌ Error reading file"
