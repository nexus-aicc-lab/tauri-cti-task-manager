
# name: Release

# on:
#   push:
#     tags:
#       - 'v*.*.*'

# permissions:
#   contents: write
#   packages: write  # 추가 권한

# jobs:
#   release:
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [windows-latest]

#     runs-on: ${{ matrix.platform }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Rust setup
#         uses: dtolnay/rust-toolchain@stable

#       - name: Rust cache
#         uses: swatinem/rust-cache@v2
#         with:
#           workspaces: './src-tauri -> target'

#       - name: Sync node version and setup cache
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: ''

#       # npm 설치
#       - name: Clean and Install Dependencies
#         shell: pwsh
#         run: |
#           Write-Host "Cleaning npm cache..."
#           npm cache clean --force
          
#           Write-Host "Setting npm registry..."
#           npm config set registry https://registry.npmjs.org/
          
#           Write-Host "Removing existing files..."
#           if (Test-Path "node_modules") { 
#             Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
#           }
#           if (Test-Path "package-lock.json") { 
#             Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
#           }
          
#           Write-Host "Installing dependencies..."
#           npm install --no-audit --no-fund --legacy-peer-deps

#       # 먼저 GitHub Release 생성
#       - name: Create Release First
#         id: create_release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: ${{ github.ref_name }}
#           name: 'CTI Task Manager ${{ github.ref_name }}'
#           body: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # Tauri 앱 빌드 (릴리즈 이미 존재함)
#       - name: Build the app
#         uses: tauri-apps/tauri-action@v0
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
#           TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}

#           TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
#         with:
#           tagName: ${{ github.ref_name }}
#           releaseName: 'CTI Task Manager v__VERSION__'
#           releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
#           releaseDraft: false
#           prerelease: false
#           args: --verbose

#       # 빌드 완료 대기
#       - name: Wait for build completion
#         run: Start-Sleep -Seconds 5
#         shell: powershell

#       # 최종 검증
#       - name: Verify GitHub Release Assets
#         run: |
#           Write-Host "=== GitHub Release Assets ==="
#           gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' || Write-Host "Failed to list GitHub assets"
#         shell: pwsh
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ''

      # npm 설치
      - name: Clean and Install Dependencies
        shell: pwsh
        run: |
          Write-Host "Cleaning npm cache..."
          npm cache clean --force
          
          Write-Host "Setting npm registry..."
          npm config set registry https://registry.npmjs.org/
          
          Write-Host "Removing existing files..."
          if (Test-Path "node_modules") { 
            Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "package-lock.json") { 
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "Installing dependencies..."
          npm install --no-audit --no-fund --legacy-peer-deps

      # 먼저 GitHub Release 생성
      - name: Create Release First
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: 'CTI Task Manager ${{ github.ref_name }}'
          body: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tauri 앱 빌드
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'CTI Task Manager v__VERSION__'
          releaseBody: '새 버전이 출시되었습니다. 업데이트를 확인해보세요!'
          releaseDraft: false
          prerelease: false
          args: --verbose

      # 빌드 완료 대기
      - name: Wait for build completion
        run: Start-Sleep -Seconds 10
        shell: powershell

      # latest.json 생성 및 업로드
      - name: Generate and Upload latest.json
        shell: pwsh
        run: |
          # 버전 정보 추출 (v 제거)
          $version = "${{ github.ref_name }}".Substring(1)
          
          # 현재 시간 (ISO 8601 형식)
          $pubDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
          
          # latest.json 내용 생성
          $latestJson = @{
            version = $version
            notes = "CTI Task Manager v$version - 새 버전이 출시되었습니다. 업데이트를 확인해보세요!"
            pub_date = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                signature = ""
                url = "https://github.com/nexus-aicc-lab/tauri-cti-task-manager/releases/download/${{ github.ref_name }}/CTI.Task.Master_${version}_x64-setup.exe"
              }
            }
          }
          
          # JSON 파일로 저장
          $latestJson | ConvertTo-Json -Depth 10 | Out-File -FilePath "latest.json" -Encoding UTF8
          
          Write-Host "Generated latest.json:"
          Get-Content "latest.json"
          
          # GitHub Release에 latest.json 업로드
          gh release upload "${{ github.ref_name }}" latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 서명 파일 생성 시도 (옵션)
      - name: Try to generate signature
        shell: pwsh
        continue-on-error: true
        run: |
          $version = "${{ github.ref_name }}".Substring(1)
          $setupFile = "CTI.Task.Master_${version}_x64-setup.exe"
          
          # Release에서 설치 파일 다운로드
          gh release download "${{ github.ref_name }}" --pattern $setupFile
          
          if (Test-Path $setupFile) {
            # 여기에 서명 생성 로직 추가 가능
            Write-Host "Setup file found: $setupFile"
            # 예: tauri-cli를 사용한 서명 생성
            # cargo tauri signer sign $setupFile --private-key "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 최종 검증
      - name: Verify GitHub Release Assets
        run: |
          Write-Host "=== GitHub Release Assets ==="
          gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' || Write-Host "Failed to list GitHub assets"
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}